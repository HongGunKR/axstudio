name: axstudio

networks:
  axstudio_net:
    name: axstudio_net

volumes:
  lf_pg_data:
  lfs_pg_data:
  clickhouse_data:
  minio_data:

services:
  # ---------------------------
  # Langflow + Postgres (Langflow는 소스 빌드)
  # ---------------------------
  lf-postgres:
    image: postgres:15-alpine
    container_name: lf-postgres
    environment:
      POSTGRES_USER: ${LF_PG_USER}
      POSTGRES_PASSWORD: ${LF_PG_PASSWORD}
      POSTGRES_DB: ${LF_PG_DB}
    volumes:
      - lf_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - axstudio_net

  langflow:
    build:
      context: ../langflow
      dockerfile: ${LANGFLOW_DOCKERFILE_PATH:-Dockerfile}
      args:
        BUILD_FRONTEND: "true"
    image: ax/langflow:local
    container_name: langflow
    depends_on:
      lf-postgres:
        condition: service_healthy
    ports:
      - "${LANGFLOW_PORT:-7860}:7860"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # ✅ 런타임에 에디터블 설치 + watchfiles로 자동 재시작
    #command: >
    #  sh -lc "
    #  python -m pip install -q 'uvicorn[standard]' fastapi watchfiles &&
    #  python -m pip install -e /app &&
    #  python -m pip install -e /app/src/backend/base &&
    #  watchfiles --filter python
    #    'python -m langflow.langflow_launcher run --host 0.0.0.0 --port 7860'
    #    /app/src/backend
    #  "
    # ✅ 로컬 소스를 컨테이너에 제대로 마운트(루트 + backend 둘 다)
    #volumes:
    #  - ../langflow:/app:rw
    #  - ../langflow/src/backend:/app/src/backend:rw
    environment:
      LANGFLOW_DATABASE_URL: postgresql+psycopg://${LF_PG_USER}:${LF_PG_PASSWORD}@lf-postgres:5432/${LF_PG_DB}
      LANGFLOW_AUTO_LOGIN: ${LANGFLOW_AUTO_LOGIN:-false}
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-}
      LANGFUSE_HOST: ${LANGFUSE_HOST:-http://localhost:3000}
      COE_BACKEND_URL: ${COE_BACKEND_URL:-http://host.docker.internal:8000}
      COE_RAG_URL: ${COE_RAG_URL:-http://localhost:8001}
      LANGFLOW_EXPOSED_ENV_VARS: "COE_BACKEND_URL,COE_RAG_URL"
      # ✅ 파이썬이 로컬 소스 먼저 보도록
      #PYTHONPATH: /app:/app/src/backend:/app/src/backend/base
    restart: unless-stopped
    networks:
      - axstudio_net

  # ---------------------------
  # Langfuse 스택 (Langfuse는 소스 빌드)
  # ---------------------------
  lfs-postgres:
    image: postgres:15-alpine
    container_name: lfs-postgres
    environment:
      POSTGRES_USER: ${LFS_PG_USER}
      POSTGRES_PASSWORD: ${LFS_PG_PASSWORD}
      POSTGRES_DB: ${LFS_PG_DB}
    volumes:
      - lfs_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - axstudio_net

  redis:
    image: redis:7-alpine
    container_name: langfuse-redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks:
      - axstudio_net

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1   # ← 권장(사용자/권한 관리 활성화)
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - /Users/cjayhong/axstudio/deployments/clickhouse/conf.d/zookeeper.xml:/etc/clickhouse-server/config.d/zookeeper.xml:ro
      - /Users/cjayhong/axstudio/deployments/clickhouse/conf.d/remote_servers.xml:/etc/clickhouse-server/config.d/remote_servers.xml:ro
      - /Users/cjayhong/axstudio/deployments/clickhouse/conf.d/macros.xml:/etc/clickhouse-server/config.d/macros.xml:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8123/ping | grep -q 'Ok.'"]
      interval: 5s
      timeout: 2s
      retries: 30
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - axstudio_net

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9090:9090"   # 콘솔(UI)
      - "9000:9000"   # S3 API
    volumes:
      - minio_data:/data
    networks:
      - axstudio_net

  langfuse-web:
    build:
      context: ../langfuse               # ← 클론한 소스 루트(모노레포)
      dockerfile: ${LANGFUSE_WEB_DOCKERFILE_PATH:-web/Dockerfile}
    image: ax/langfuse-web:local
    container_name: langfuse-web
    depends_on:
      lfs-postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "${LANGFUSE_PORT:-3000}:3000"
    environment:
      DATABASE_URL: postgresql://${LFS_PG_USER}:${LFS_PG_PASSWORD}@lfs-postgres:5432/${LFS_PG_DB}
      DIRECT_URL: postgresql://${LFS_PG_USER}:${LFS_PG_PASSWORD}@lfs-postgres:5432/${LFS_PG_DB}
      CLICKHOUSE_MIGRATION_URL: clickhouse://clickhouse:9000
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-langfuse}
      REDIS_CONNECTION_STRING: redis://langfuse-redis:6379
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SALT: ${SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      HOSTNAME: 0.0.0.0
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${MINIO_MEDIA_BUCKET:-langfuse-media}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${MINIO_EVENT_BUCKET:-langfuse-events}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION}
      LANGFUSE_DEBUG: "true"
      LOG_LEVEL: "debug"
    restart: unless-stopped
    networks:
      - axstudio_net

  langfuse-worker:
    build:
      context: ../langfuse
      dockerfile: ${LANGFUSE_WORKER_DOCKERFILE_PATH:-worker/Dockerfile}
    image: ax/langfuse-worker:local
    container_name: langfuse-worker
    depends_on:
      - langfuse-web
    environment:
      DATABASE_URL: postgresql://${LFS_PG_USER}:${LFS_PG_PASSWORD}@lfs-postgres:5432/${LFS_PG_DB}
      CLICKHOUSE_MIGRATION_URL: clickhouse://clickhouse:9000
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-langfuse}
      REDIS_CONNECTION_STRING: redis://langfuse-redis:6379
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SALT: ${SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      HOSTNAME: 0.0.0.0
      PORT: 3030
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${MINIO_MEDIA_BUCKET:-langfuse-media}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${MINIO_EVENT_BUCKET:-langfuse-events}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION}
      LANGFUSE_DEBUG: "true"
      LOG_LEVEL: "debug"
    restart: unless-stopped
    networks:
      - axstudio_net

  # ---------------------------
  # Arize Phoenix (이미지 그대로 사용)
  # ---------------------------
  phoenix:
    image: ${PHOENIX_IMAGE:-arizephoenix/phoenix:latest}
    container_name: phoenix
    environment:
      PHOENIX_PORT: ${PHOENIX_PORT:-6006}
      PHOENIX_GRPC_PORT: ${PHOENIX_GRPC_PORT:-4317}
      PHOENIX_ALLOW_EXTERNAL_RESOURCES: ${PHOENIX_ALLOW_EXTERNAL_RESOURCES:-false}
    ports:
      - "${PHOENIX_PORT:-6006}:6006"
      - "${PHOENIX_GRPC_PORT:-4317}:4317"
    restart: unless-stopped
    networks:
      - axstudio_net

  zookeeper:
    image: zookeeper:3.7
    container_name: zookeeper
    ports: []
    restart: unless-stopped
    networks:
      - axstudio_net